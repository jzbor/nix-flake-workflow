name: reusable-flake

on:
  workflow_call:
    inputs:
      binary-cache:
        required: false
        type: boolean
    secrets:
      ATTIC_ENDPOINT:
        required: false
      ATTIC_TOKEN:
        required: false
      ATTIC_CACHE:
        required: false

env:
  EXTRA_NIX_CONFIG: |
    extra-trusted-public-keys = public:AdkE6qSLmWKFX4AptLFl+n+RTPIo1lrBhT2sPgfg5s4=
    extra-substituters = https://cache.jzbor.de/public

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: '${{ env.EXTRA_NIX_CONFIG }}'
      - name: 'Download statix'
        run: nix build nixpkgs#statix --no-link
      - name: 'Run static checks'
        run: nix run nixpkgs#statix -- check .

  dead-code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: '${{ env.EXTRA_NIX_CONFIG }}'
      - name: 'Download deadnix'
        run: nix build nixpkgs#deadnix --no-link
      - name: 'Run dead-code checks'
        run: nix run nixpkgs#deadnix -- -_ -f .

  flake-check:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: '${{ env.EXTRA_NIX_CONFIG }}'
      - name: 'Run flake checks'
        run: nix flake check

  discover:
    runs-on: ubuntu-latest
    needs: [static-analysis, dead-code-analysis, flake-check]
    outputs:
      packages: ${{ steps.discover-step.outputs.packages }}
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: '${{ env.EXTRA_NIX_CONFIG }}'
      - name: 'Discover flake packages'
        id: discover-step
        run: printf "packages=%s\n" "$(nix eval .#packages.$(nix eval --impure --raw --expr 'builtins.currentSystem') --apply builtins.attrNames --json)" | tee -a $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: [discover]
    if: ${{ needs.discover.outputs.packages != '' }}
    strategy:
      matrix:
        package: ${{ fromJSON(needs.discover.outputs.packages) }}
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: '${{ env.EXTRA_NIX_CONFIG }}'
      - name: 'Setup Attic cache'
        uses: ryanccn/attic-action@v0
        if: ${{ inputs.binary-cache == true }}
        with:
          endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          cache: ${{ secrets.ATTIC_CACHE }}
          token: ${{ secrets.ATTIC_TOKEN }}
      - name: 'Checking binary cache'
        id: check-binary-cache
        if: ${{ inputs.binary-cache == true }}
        run: if curl -f "${{ secrets.ATTIC_ENDPOINT }}/${{ secrets.ATTIC_CACHE }}/$(nix eval --raw ".#${{ matrix.package }}" | sed 's/.nix.store.\([a-z0-9]*\).*/\1/').narinfo"; then echo "exists=1" | tee -a $GITHUB_OUTPUT; fi
      - name: 'Build package "${{ matrix.package }}"'
        if: ${{ inputs.binary-cache == false || steps.check-binary-cache.outputs.exists == null }}
        run: nix build ".#${{ matrix.package }}"
      - name: 'Push package closure to binary cache'
        if: ${{ inputs.binary-cache == true && steps.check-binary-cache.outputs.exists == null }}
        run: |
          if [ -L ./result ]; then
            attic push "${{ secrets.ATTIC_CACHE }}" ./result;
          else
            echo "No new paths built"
          fi


