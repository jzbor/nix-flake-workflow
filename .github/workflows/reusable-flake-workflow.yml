name: reusable-flake

on:
  workflow_call:
    inputs:
      binary-cache:
        required: false
        type: boolean
      blocklist:
        required: false
        type: string
      magic-cache:
        required: false
        type: boolean
      upload-artifacts:
        required: false
        type: boolean
      architectures:
        required: false
        type: string
      build-args:
        required: false
        type: string
      arm-runners:
        required: false
        type: boolean
      disable-eval-checks:
        required: false
        type: boolean
      allow-impure:
        required: false
        type: boolean
      attic-endpoint:
        required: false
        type: string
      attic-cache:
        required: false
        type: string
    secrets:
      ATTIC_ENDPOINT:
        required: false
      ATTIC_TOKEN:
        required: false
      ATTIC_CACHE:
        required: false

env:
  NIXPKGS_ALLOW_UNFREE: 1
  EXTRA_NIX_CONFIG: |
    min-free = 1073741824   # 1 GiB
    max-free = 6442450944   # 6 GiB

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: '${{ env.EXTRA_NIX_CONFIG }}'

      - name: 'Install statix'
        run: |
          nix profile install github:jzbor/nix-flake-workflow#statix \
          --extra-substituters https://cache.jzbor.de/public \
          --extra-trusted-public-keys public:AdkE6qSLmWKFX4AptLFl+n+RTPIo1lrBhT2sPgfg5s4=

      - name: 'Run static checks'
        run: statix check


  dead-code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: '${{ env.EXTRA_NIX_CONFIG }}'

      - name: 'Install deadnix'
        run: |
          nix profile install github:jzbor/nix-flake-workflow#deadnix \
          --extra-substituters https://cache.jzbor.de/public \
          --extra-trusted-public-keys public:AdkE6qSLmWKFX4AptLFl+n+RTPIo1lrBhT2sPgfg5s4=

      - name: 'Run dead-code checks'
        run: deadnix -_ -L -f .


  flake-eval-check:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: '${{ env.EXTRA_NIX_CONFIG }}'

      - name: 'Run flake checks without building'
        if: ${{ ! inputs.disable-eval-checks }}
        run: nix flake check --no-build ${{ inputs.allow-impure && '--impure' || '' }}

      - name: 'Alternatively run nix flake show'
        if: ${{ inputs.disable-eval-checks }}
        run: nix flake show


  discover-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.discover-step.outputs.packages }}
      native-arch: ${{ steps.native-architecture.outputs.native }}
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: '${{ env.EXTRA_NIX_CONFIG }}'

      - name: 'Install nix-flake-workflow binary'
        run: |
          nix profile install github:jzbor/nix-flake-workflow \
          --extra-substituters https://cache.jzbor.de/public \
          --extra-trusted-public-keys public:AdkE6qSLmWKFX4AptLFl+n+RTPIo1lrBhT2sPgfg5s4=

      - name: 'Get native architecture'
        id: native-architecture
        run: printf "native=%s\n" "$(nix eval --impure --raw --expr "builtins.toJSON [builtins.currentSystem]")" | tee -a $GITHUB_OUTPUT

      - name: 'Get architectures'
        id: get-architectures-step
        run: printf "architectures=%s\n" '${{ inputs.architectures || steps.native-architecture.outputs.native}}' | tee -a $GITHUB_OUTPUT

      - name: 'Get blocklist'
        id: get-blocklist
        run: printf "blocklist=%s\n" '${{ inputs.blocklist || '[]'}}' | tee -a $GITHUB_OUTPUT

      - name: 'Discover flake packages'
        id: discover-step
        run: >
          cache="${{ secrets.ATTIC_ENDPOINT || inputs.attic-endpoint }}/${{ secrets.ATTIC_CACHE || inputs.attic-cache }}";
          packages="$(
            nix-flake-workflow \
              discover \
              --prefix packages \
              --systems '${{ steps.get-architectures-step.outputs.architectures }}' \
              ${{ inputs.binary-cache && '--check' || '' }} ${{ inputs.binary-cache && '$cache' || '' }} \
              ${{ inputs.binary-cache && '--auth' || '' }} ${{ inputs.binary-cache && secrets.ATTIC_TOKEN || '' }} \
              --filter '${{ steps.get-blocklist.outputs.blocklist }}'
          )" && printf "packages=%s\n" "$packages"  | tee -a $GITHUB_OUTPUT


  discover-checks:
    runs-on: ubuntu-latest
    outputs:
      checks: ${{ steps.discover-step.outputs.checks }}
      native-arch: ${{ steps.native-architecture.outputs.native }}
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: '${{ env.EXTRA_NIX_CONFIG }}'

      - name: 'Install nix-flake-workflow binary'
        run: |
          nix profile install github:jzbor/nix-flake-workflow \
          --extra-substituters https://cache.jzbor.de/public \
          --extra-trusted-public-keys public:AdkE6qSLmWKFX4AptLFl+n+RTPIo1lrBhT2sPgfg5s4=

      - name: 'Get native architecture'
        id: native-architecture
        run: printf "native=%s\n" "$(nix eval --impure --raw --expr "builtins.toJSON [builtins.currentSystem]")" | tee -a $GITHUB_OUTPUT

      - name: 'Get architectures'
        id: get-architectures-step
        run: printf "architectures=%s\n" '${{ inputs.architectures || steps.native-architecture.outputs.native}}' | tee -a $GITHUB_OUTPUT

      - name: 'Get blocklist'
        id: get-blocklist
        run: printf "blocklist=%s\n" '${{ inputs.blocklist || '[]'}}' | tee -a $GITHUB_OUTPUT

      - name: 'Discover flake checks'
        id: discover-step
        run: >
          cache="${{ secrets.ATTIC_ENDPOINT || inputs.attic-endpoint }}/${{ secrets.ATTIC_CACHE || inputs.attic-cache }}";
          checks="$(
            nix-flake-workflow \
              discover \
              --prefix checks \
              --systems '${{ steps.get-architectures-step.outputs.architectures }}' \
              ${{ inputs.binary-cache && '--check' || '' }} ${{ inputs.binary-cache && '$cache' || '' }} \
              ${{ inputs.binary-cache && '--auth' || '' }} ${{ inputs.binary-cache && secrets.ATTIC_TOKEN || '' }} \
              --filter '${{ steps.get-blocklist.outputs.blocklist }}' \
              --with-hashes
          )" && printf "checks=%s\n" "$checks"  | tee -a $GITHUB_OUTPUT

  build:
    runs-on: ${{ inputs.arm-runners && startsWith(matrix.package, 'packages.aarch64-linux.') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    needs: [discover-packages, static-analysis, dead-code-analysis, flake-eval-check]
    if: ${{ needs.discover-packages.outputs.packages != '[]' }}
    strategy:
      matrix:
        package: ${{ fromJSON(needs.discover-packages.outputs.packages) }}
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Check if this is a native aarch64 runner'
        if: ${{ inputs.arm-runners && startsWith(matrix.package, 'packages.aarch64-linux.') }}
        id: is-aarch64
        run: |
          printf 'is-aarch64=true\n' | tee -a $GITHUB_OUTPUT

      - name: 'Install QEMU/binfmt'
        if: ${{ inputs.architectures && !steps.is-aarch64.outputs.is-aarch64 }}
        uses: docker/setup-qemu-action@v3

      - name: 'Determine package architecture'
        id: determine-architecture
        run: |
          printf 'arch=%s\n' "$(echo '${{ matrix.package }}' | cut -d. -f1)" | tee -a $GITHUB_OUTPUT

      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            ${{ env.EXTRA_NIX_CONFIG }}
            extra-platforms = ${{ steps.determine-architecture.outputs.arch }}

      - name: 'Setup Magic Nix Cache'
        if: ${{ inputs.magic-cache == true }}
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: 'Install attic-client'
        run: |
          nix profile install github:jzbor/nix-flake-workflow#attic-client \
          --extra-substituters https://cache.jzbor.de/public \
          --extra-trusted-public-keys public:AdkE6qSLmWKFX4AptLFl+n+RTPIo1lrBhT2sPgfg5s4=

      - name: 'Setup Attic cache'
        uses: ryanccn/attic-action@v0
        if: ${{ inputs.binary-cache == true }}
        with:
          endpoint: ${{ secrets.ATTIC_ENDPOINT || inputs.attic-endpoint }}
          cache: ${{ secrets.ATTIC_CACHE || inputs.attic-cache }}
          token: ${{ secrets.ATTIC_TOKEN }}

      - name: 'Build package "${{ matrix.package }}"'
        id: build-package
        run: |
          nix build ".#${{ matrix.package }}" --no-link ${{ inputs.build-args }} ${{ inputs.allow-impure && '--impure' || '' }}
          printf "path=%s\n" "$(nix build ".#${{ matrix.package }}" --print-out-paths --no-link ${{ inputs.allow-impure && '--impure' || '' }} | head -n1)" | tee -a $GITHUB_OUTPUT

      - name: 'Prepare package for upload as artifact'
        id: prepare-artifact
        if: ${{ inputs.upload-artifacts == true }}
        run: |
          cp -rvL "${{ steps.build-package.outputs.path }}" .
          printf "artifact_path=%s\n" "$(nix build ".#${{ matrix.package }}" --print-out-paths --no-link ${{ inputs.allow-impure && '--impure' || '' }} | sed 's/\/nix\/store\/\(.*\)/\1/')" | tee -a $GITHUB_OUTPUT

      - name: 'Upload package as artifact'
        if: ${{ inputs.upload-artifacts == true }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}
          path: ${{ steps.prepare-artifact.outputs.artifact_path }}

      - name: 'Push package closure to binary cache'
        if: ${{ inputs.binary-cache == true }}
        run: attic push "${{ secrets.ATTIC_CACHE || inputs.attic-cache }}" "${{ steps.build-package.outputs.path }}"


  rescan-checks:
    runs-on: 'ubuntu-latest'
    needs: [discover-checks, build]
    if: ${{ (success() || needs.discover-packages.outputs.packages == '[]') && needs.discover-checks.outputs.checks != '{}' }}
    outputs:
      checks: ${{ steps.rescan-step.outputs.checks }}
    steps:
      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: '${{ env.EXTRA_NIX_CONFIG }}'

      - name: 'Install nix-flake-workflow binary'
        run: |
          nix profile install github:jzbor/nix-flake-workflow \
          --extra-substituters https://cache.jzbor.de/public \
          --extra-trusted-public-keys public:AdkE6qSLmWKFX4AptLFl+n+RTPIo1lrBhT2sPgfg5s4=

      - name: 'Rescan binary cache for flake checks'
        id: rescan-step
        run: >
          cache="${{ secrets.ATTIC_ENDPOINT || inputs.attic-endpoint }}/${{ secrets.ATTIC_CACHE || inputs.attic-cache }}";
          checks="$(
            nix-flake-workflow \
              check-cache \
              --attrs '${{ needs.discover-checks.outputs.checks }}' \
              ${{ inputs.binary-cache && '--check' || '' }} ${{ inputs.binary-cache && '$cache' || '' }} \
              ${{ inputs.binary-cache && '--auth' || '' }} ${{ inputs.binary-cache && secrets.ATTIC_TOKEN || '' }} \
          )" && printf "checks=%s\n" "$checks"  | tee -a $GITHUB_OUTPUT


  check:
    runs-on: ${{ inputs.arm-runners && startsWith(matrix.check, 'checks.aarch64-linux.') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    needs: [rescan-checks]
    if: ${{ needs.rescan-checks.outputs.checks != '[]' }}
    strategy:
      matrix:
        check: ${{ fromJSON(needs.rescan-checks.outputs.checks) }}
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Check if this is a native aarch64 runner'
        if: ${{ inputs.arm-runners && startsWith(matrix.check, 'checks.aarch64-linux.') }}
        id: is-aarch64
        run: |
          printf 'is-aarch64=true\n' | tee -a $GITHUB_OUTPUT

      - name: 'Install QEMU/binfmt'
        if: ${{ inputs.architectures && !steps.is-aarch64.outputs.is-aarch64 }}
        uses: docker/setup-qemu-action@v3

      - name: 'Determine checks architecture'
        id: determine-architecture
        run: |
          printf 'arch=%s\n' "$(echo '${{ matrix.check }}' | cut -d. -f1)" | tee -a $GITHUB_OUTPUT

      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            ${{ env.EXTRA_NIX_CONFIG }}
            extra-platforms = ${{ steps.determine-architecture.outputs.arch }}

      - name: 'Setup Magic Nix Cache'
        if: ${{ inputs.magic-cache == true }}
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: 'Install attic-client'
        run: |
          nix profile install github:jzbor/nix-flake-workflow#attic-client \
          --extra-substituters https://cache.jzbor.de/public \
          --extra-trusted-public-keys public:AdkE6qSLmWKFX4AptLFl+n+RTPIo1lrBhT2sPgfg5s4=

      - name: 'Setup Attic cache'
        uses: ryanccn/attic-action@v0
        if: ${{ inputs.binary-cache == true }}
        with:
          endpoint: ${{ secrets.ATTIC_ENDPOINT || inputs.attic-endpoint }}
          cache: ${{ secrets.ATTIC_CACHE || inputs.attic-cache }}
          token: ${{ secrets.ATTIC_TOKEN }}

      - name: 'Run check "${{ matrix.check }}"'
        run: |
          nix build ".#${{ matrix.check }}" --no-link ${{ inputs.build-args }} ${{ inputs.allow-impure && '--impure' || '' }}
          printf "path=%s\n" "$(nix build ".#${{ matrix.check }}" --print-out-paths --no-link ${{ inputs.allow-impure && '--impure' || '' }} | head -n1)" | tee -a $GITHUB_OUTPUT
