name: flake-fast

on:
  workflow_call:
    inputs:
      binary-cache:
        required: false
        type: boolean
    secrets:
      ATTIC_ENDPOINT:
        required: false
      ATTIC_TOKEN:
        required: false
      ATTIC_CACHE:
        required: false

jobs:
  check-and-discover:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.discover-step.outputs.packages }}
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
      - name: 'Run dead-code checks'
        run: nix run nixpkgs#deadnix -- -_ -f .
      - name: 'Run static checks'
        run: nix run nixpkgs#statix -- check .
      - name: 'Run flake checks'
        run: nix flake check
      - name: 'Discover flake packages'
        id: discover-step
        run: printf "packages=%s\n" "$(nix eval .#packages.$(nix eval --impure --raw --expr 'builtins.currentSystem') --apply builtins.attrNames --json)" | tee -a $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: [check-and-discover]
    if: ${{ needs.discover.outputs.packages != '' }}
    strategy:
      matrix:
        package: ${{ fromJSON(needs.discover.outputs.packages) }}
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
      - name: 'Setup Attic cache'
        uses: ryanccn/attic-action@v0
        if: ${{ inputs.binary-cache == true }}
        with:
          endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          cache: ${{ secrets.ATTIC_CACHE }}
          token: ${{ secrets.ATTIC_TOKEN }}
      - name: 'Build package "${{ matrix.package }}"'
        run: nix build ".#${{ matrix.package }}"


